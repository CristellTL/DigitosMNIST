# -*- coding: utf-8 -*-
"""Digitos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KAgZ0RKS_me6n-RQ-TVFOCe8EImvN8jE
"""

# Commented out IPython magic to ensure Python compatibility.
#Cargamos las librerias necesarias
# %matplotlib inline
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.colors import ListedColormap
from sklearn.metrics import confusion_matrix

#Cargamos el dataset de números de MNIST
from tensorflow.examples.tutorials.mnist import input_data
data = input_data.read_data_sets("data/MNIST/", one_hot=True)

#Conversión de vectores a un solo número
data.test.cls = np.array([label.argmax() for label in data.test.labels])
x_train=np.array([label.argmax() for label in data.train.images])
y_train=np.array([label.argmax() for label in data.train.labels])
x_test=np.array([label.argmax() for label in data.test.images])
y_test=np.array([label.argmax() for label in data.test.labels])

#plt.ion()
#fig, ax = plt.subplots(1, 1)
#fig=plt.figure()
#cm = plt.cm.RdBu
#cm_bright = ListedColormap(['#FF0000', '#0000FF'])
#ax.scatter(x_test, y_test, c=y_test, cmap=cm_bright)
#fig.show()
#plt.draw()

#Tamaño de las imágenes 28x28 pixeles
img_size = 28
img_size_flat = img_size * img_size
img_shape = (img_size, img_size)

#Número de clases. Una clase por cada dígito
num_classes = 10

# Setting hyperparameters
n_observations = 100
lr = 0.005
n_iter = 200

def plot_images(images, cls_true, cls_pred=None):
    assert len(images) == len(cls_true) == 9

    fig, axes = plt.subplots(3, 3)
    fig.subplots_adjust(hspace=0.5, wspace=0.5)

    for i, ax in enumerate(axes.flat):
        ax.imshow(images[i].reshape(img_shape), cmap='binary')

        if cls_pred is None:
            xlabel = "True: {0}".format(cls_true[i])
        else:
            xlabel = "True: {0}, Pred: {1}".format(cls_true[i], cls_pred[i])

        ax.set_xlabel(xlabel)

        ax.set_xticks([])
        ax.set_yticks([])

#Variables de marcador de posición
x = tf.placeholder(tf.float32, [None, img_size_flat])
y = tf.placeholder(tf.float32, [None, img_size_flat])
y_true = tf.placeholder(tf.float32, [None, num_classes])
y_true_cls = tf.placeholder(tf.int64, [None])

#Clasificador lineal
w = tf.Variable(tf.zeros([img_size_flat, num_classes]))
b = tf.Variable(tf.zeros([ num_classes]))
logits = tf.matmul(x, w) + b
y_pred = tf.nn.softmax(logits)
y_pred_cls = tf.argmax(y_pred, dimension=1)

cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=logits,labels=y_true)
cost = tf.reduce_mean(cross_entropy)
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5).minimize(cost)
correct_prediction = tf.equal(y_pred_cls, y_true_cls)
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

#Ejecutar Tensorflow
session = tf.Session()
session.run(tf.global_variables_initializer())

batch_size = 100  

def optimize(num_iterations):
    for i in range(num_iterations):
        x_batch, y_true_batch = data.train.next_batch(batch_size)
        feed_dict_train = {x: x_batch,
                           y_true: y_true_batch}
        session.run(optimizer, feed_dict=feed_dict_train)

#Clasificador de kernel gaussiano

#Mapeo a R3
def mapping(x, y):
    x = np.c_[(x, y)]
    if len(x) > 2:
        x_1 = x[:,0]**2
        x_2 = np.sqrt(2)*x[:,0]*x[:,1]
        x_3 = x[:,1]**2  
    else:    
        x_1 = x[0]**2
        x_2 = np.sqrt(2)*x[0]*x[1]
        x_3 = x[1]**2
        
    trans_x = np.array([x_1, x_2, x_3])
    return trans_x

#Ploteo en R3
x_1=mapping(x_train,y_train)
fig=plt.figure()
ax=fig.add_subplot(111, projection='3d')
ax.scatter(x_1[0], x_1[1], x_1[1], c=x_1[1], s=60)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
plt.show()

#Kernel Gaussiano
def gkern(l=5, sig=1.):
    ax = np.linspace(-(l - 1) / 2., (l - 1) / 2., l)
    xx, yy = np.meshgrid(ax, ax)
  
    #Función de Kernel Gaussiano
    kernel = np.exp(-0.5 * (np.square(xx) + np.square(yy)) / np.square(sig))

    return kernel / np.sum(kernel)